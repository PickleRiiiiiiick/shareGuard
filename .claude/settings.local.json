{
  "permissions": {
    "allow": [
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=/mnt/c/ShareGuard python3 -c \"from src.core.scanner import scanner; print('Scanner imported successfully')\")",
      "Bash(PYTHONPATH=/mnt/c/ShareGuard python3 update_permissions.py)",
      "Bash(npm install:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run lint)",
      "Bash(.\\venv\\Scripts\\python.exe -c \"import win32security; print('pywin32 version:', getattr(win32security, '__version__', 'unknown')); import pkg_resources; print('Package version:', pkg_resources.get_distribution('pywin32').version)\")",
      "Bash(./venv/Scripts/python.exe -c \"import pkg_resources; print('pywin32 version:', pkg_resources.get_distribution('pywin32').version)\")",
      "Bash(./venv/Scripts/python.exe debug_sid_resolution.py:*)",
      "Bash(source:*)",
      "Bash(./start-backend.ps1)",
      "Bash(PYTHONPATH=/mnt/c/ShareGuard/src python3 -c \"\nimport sys\nsys.path.insert(0, ''/mnt/c/ShareGuard/src'')\ntry:\n    from api.routes import alert_routes\n    print(''Alert routes imported successfully'')\nexcept Exception as e:\n    print(f''Import error: {e}'')\n\")",
      "Bash(mkdir:*)",
      "Bash(/mnt/c/ShareGuard/venv/bin/python -c \"\nimport sys\nsys.path.insert(0, '/mnt/c/ShareGuard')\nfrom src.db.database import get_db\nfrom src.db.models import Alert\nfrom sqlalchemy.orm import Session\n\ndb = next(get_db())\nalerts_count = db.query(Alert).count()\nprint(f'Total alerts in database: {alerts_count}')\n\n# Get last 5 alerts if any\nrecent_alerts = db.query(Alert).order_by(Alert.created_at.desc()).limit(5).all()\nif recent_alerts:\n    print('\\nRecent alerts:')\n    for alert in recent_alerts:\n        print(f'  - ID: {alert.id}, Type: {alert.alert_type}, Severity: {alert.severity}, Created: {alert.created_at}')\nelse:\n    print('\\nNo alerts found in database')\ndb.close()\n\")",
      "Bash(curl:*)",
      "Bash(export USE_SQLITE=true)",
      "Bash(alembic revision:*)",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); from core.health_analyzer import HealthAnalyzer; print('Import successful')\")",
      "Bash(./venv/Scripts/python.exe -c \"import sys; sys.path.insert(0, 'src'); from api.routes.health_routes import router; print('Health routes import successful')\")",
      "Bash(alembic current:*)",
      "Bash(./venv/Scripts/python:*)",
      "Bash(./venv/Scripts/alembic.exe current)",
      "Bash(./venv/Scripts/alembic.exe history --verbose)",
      "Bash(./venv/Scripts/alembic.exe downgrade base)",
      "Bash(./venv/Scripts/alembic.exe upgrade head)",
      "Bash(../venv/Scripts/python.exe -m uvicorn app:app --host 0.0.0.0 --port 8000 --reload)",
      "Bash(powershell.exe:*)",
      "Bash(export:*)",
      "Bash(export USE_SQLITE=\"true\")",
      "Bash(export SQLITE_PATH=\"shareguard.db\")",
      "Bash(./venv/Scripts/uvicorn.exe app:app:*)",
      "Bash(../venv/Scripts/uvicorn.exe app:app --host 0.0.0.0 --port 8000)",
      "Bash(rm:*)",
      "Bash(sqlite3:*)",
      "Bash(hostname)",
      "Bash(env)",
      "Bash(alembic upgrade:*)",
      "Bash(chmod:*)",
      "Bash(./test_health_api.sh:*)",
      "Bash(.start-backend.ps1)",
      "Bash(PYTHONPATH=/mnt/c/ShareGuard/src USE_SQLITE=true SQLITE_PATH=../shareguard.db ../venv/Scripts/python.exe -c \"\nimport sys\nprint(''Python path:'', sys.path)\ntry:\n    from core.health_analyzer import HealthAnalyzer  \n    print(''HealthAnalyzer imported successfully'')\n    \n    # Try to instantiate\n    analyzer = HealthAnalyzer()\n    print(''HealthAnalyzer instantiated successfully'')\n    \n    # Try a simple method call\n    print(''Testing run_health_scan method...'')\n    # This will likely fail due to missing data, but we want to see the error\n    \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=/mnt/c/ShareGuard/src:/mnt/c/ShareGuard ./venv/Scripts/python.exe -c \"\nimport sys\nprint(''PYTHONPATH set to:'', sys.path)\ntry:\n    from src.core.health_analyzer import HealthAnalyzer\n    print(''SUCCESS: HealthAnalyzer imported successfully'')\nexcept Exception as e:\n    print(''ERROR importing HealthAnalyzer:'', e)\n    import traceback\n    traceback.print_exc()\n\")"
    ],
    "deny": []
  }
}